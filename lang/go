language = "go"
name = "Go"
homepage = Just "https://go.dev/"
spec = Informal
status = Mainstream

impl = Standalone
domain = [ GeneralPurpose ]
platform = [ Linux, Windows, MacOS ]

typing = Partial
safety = MemorySafe
mm = AutomaticMM
everything = AMess

paradigms = [ Imperative ]
parallelism = [ ManualSharedStatePE ]
features = [ Goto, MutableState, NominalTyping, TypeInference, Introspection ]
concurrency = [ HardwareThreads, Coroutines, Channels ]
runtime = [ Stack, Scheduler, GarbageCollector, ErrorHandling ]

orthogonality = Embarrassing
example =
  """
  package main

  import (
      "fmt"
      "time"
  )

  func readword(ch chan string) {
      fmt.Println("Type a word, then hit Enter.")
      var word string
      fmt.Scanf("%s", &word)
      ch <- word
  }

  func timeout(t chan bool) {
      time.Sleep(5 * time.Second)
      t <- false
  }

  func main() {
      t := make(chan bool)
      go timeout(t)

      ch := make(chan string)
      go readword(ch)

      select {
      case word := <-ch:
          fmt.Println("Received", word)
      case <-t:
          fmt.Println("Timeout.")
      }
  }
  """
